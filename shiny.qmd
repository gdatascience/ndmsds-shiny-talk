---
title: "Get Your Shiny On"
subtitle: "Turning R Code into Interactive Gold!"
date: "2024-12-05"
author: "Tony Galván"
title-slide-attributes: 
  data-notes: "Hi everyone! My name is Tony Galvan, and I’m thrilled to welcome you to this session, 'Get Your Shiny On: Turning R Code into Interactive Gold!' Today, we’re going to embark on a journey where we transform static data into dynamic, interactive stories using Shiny. Imagine you’re a storyteller, but instead of words, you use data. Shiny is the magic wand that brings your data stories to life, making them engaging and interactive. Whether you’re building dashboards, apps, or experimenting with machine learning models, Shiny opens up a world of possibilities. Before we dive into the magic of Shiny, let’s do a quick roll call. In the chat, could everyone share where they’re tuning in from? It’s always fascinating to see the diverse locations represented in these sessions. Also, make sure you’ve got RStudio open and ready to go. This is going to be a hands-on session, and we’ll be coding together. By the end of this session, you’ll have the confidence to start building your own Shiny apps and tell your own data stories."
format:
  revealjs: 
    theme: acorns.scss
    code-line-numbers: false
editor: visual
server: shiny
---

## Life Changing Stories <!-- slide_02 -->

::::: columns
::: {.column width="50%"}
[![](https://upload.wikimedia.org/wikipedia/en/f/f1/Rudy_%281993_movie_poster%29.jpg){width="393"}](https://en.wikipedia.org/wiki/Rudy_(film))
:::

::: {.column width="50%"}
[![](images/clipboard-2848714017.png)](https://youtu.be/eBJmj2cJrpE?si=Kod3aOJ0J2DVwAbx)
:::
:::::

::: notes
Stories have a unique power to inspire and transform our lives. Today, I want to share two stories that changed my life.

The first story takes us back to October 1993. I was a junior in high school, and my football team was in the midst of an incredible run to the CIF championship in Southern California. Around that time, the movie Rudy was released. For those who haven’t seen it, please raise your hand so that we can all shame you. Rudy is the true story of a young man who dreams of playing football at Notre Dame despite all odds. The movie’s message of perseverance and following your dreams struck a chord with me. It was so inspiring that it prompted me to apply to Notre Dame—a school I had never considered before. And as they say, the rest is history.

The second story from a TEDx talk on YouTube video called 'Big Data for the Common Good' by Nitesh Chawla, a professor at Notre Dame. He argues that by paying attention to the facts and circumstances of people’s daily lives, we can significantly improve health and wellness. He talks about how tracking personal data on a large scale can help us move from insufficient healthcare to abundant health. This idea of using data for the greater good resonated deeply with me.

This video was instrumental in convincing my wife that I should pursue a Master’s in Data Science at Notre Dame, despite having two small children under 7 and holding down a full-time job. It was a challenging decision, but the story’s message about the power of data to make a difference made it clear that this was the right path for me.

These stories illustrate the power of well-told narratives to inspire action and change lives. And that’s exactly what Shiny allows us to do—tell better, more engaging stories with our data, machine learning models, and more.
:::

## My Journey as a Double Domer <!-- slide_03 -->

### [University of Notre Dame]{style="color: #74c947"}

::::: columns
::: {.column width="60%"}
-   1999 B.B.A. Management Information Systems
-   2019 M.S. Data Science
:::

::: {.column width="40%"}
![](images/now_and_then.jpg){fig-align="center"}
:::
:::::

::: notes
You know, they say good things come in pairs, and that’s certainly true for my diplomas from Notre Dame. I’m a proud Double Domer, having graduated not once, but twice. The first time was back in 1999 with a Bachelor of Business Administration in Management Information Systems, and then I made my triumphant return in 2019 to earn a Master of Science in Data Science.

On this slide, you’ll see two photos that are pretty special to me. The top photo is from 1997 when I was a Student Manager for the Notre Dame football team, working under legendary coaches Lou Holtz and Urban Meyer. And yes, I also worked under the not-so-legendary coach Bob Davie. It was an incredible experience that taught me a lot about teamwork and perseverance.

The bottom photo is from my 2019 graduation. This time, I was lucky enough to share the day with my wife, kids, and extended family, all proudly wearing matching 'Double Domer' t-shirts. It was a moment of celebration and reflection on the journey we had all been through together.

Notre Dame didn’t just give me degrees—it gave me a mission to fight for good, lifelong friendships, and relationships that I cherish to this day. It’s a place where I learned to bleed blue and gold, and it instilled in me a passion for continuous learning and making a positive impact in the world.

And that passion for learning and making a difference is what I’m here to share with you today.
:::

## What I'm Up to These Days <!-- slide_04 -->

::::: columns
::: {.column width="50%"}
### [Acorns]{style="color: #74c947"}

-   Data Analyst
-   Analytics Engineer

![](https://sqy7rm.media.zestyio.com/Acorns-Logo.svg){fig-align="center" height="200"}
:::

::: {.column width="50%"}
### [Tidy Tuesday]{style="color: #74c947"}

-   Tuesdays \@ 11AM PST on [Zoom](https://notredame.zoom.us/j/93246968828?pwd=T2k0QUFKNkxvMkV2ekZrejdpdTJIdz09){target="_blank"}

![](https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/tt_logo.png){fig-align="center"}
:::
:::::

::: notes
So, what am I up to these days? Well, I work as an Analytics Engineer and Data Analyst at Acorns. My day-to-day involves wrangling data, building dashboards, and automating workflows. Basically, I’m a professional data problem solver — except my puzzles occasionally yell at me in the form of cryptic error messages.

Outside of work, I run weekly Tidy Tuesday sessions. These are casual get-togethers where we take random datasets and try to uncover insights—or at least find a halfway decent visualization. It’s part data exploration, part group therapy for R users.

Tidy Tuesday is where I’ve really leveled up my data science game. It’s been a playground for learning, a laboratory for failed experiments, and a reminder that even the most boring datasets can shine with a little creativity. It’s also where I discovered that debugging is way more tolerable when someone else is suffering alongside you.

Today, I’m excited to share some of the lessons I’ve learned through work, Tidy Tuesday, and a whole lot of trial and error. Let’s jump in and see how Shiny can add a whole new dimension to your data science toolkit!
:::

## What is Shiny? <!-- slide_05 -->

```{r ShinyInstall}
#| echo: true
#| eval: false

install.packages("shiny")
```

::: notes
Alright, now that you know a bit about me, it’s time to focus on the real star of today’s show: Shiny!

Before we dive into the details, let me ask you a quick question: how familiar are you with Shiny? Drop your answer in the chat—are you a:

Shiny newbie (nothing at all), Homework hero (just what we did for class), Casual tinkerer (a little work experience), Or a Shiny master (you eat reactive programming for breakfast)? While you’re sharing, let’s make sure everyone’s ready to roll. Open up RStudio and install Shiny by running this code snippet: install.packages("shiny")
:::

. . .

-   Transforms static R code into dynamic, interactive experiences
-   No need for HTML, CSS, or JavaScript
-   Reactive: Automatically updates outputs when inputs change

::: notes
So, what is Shiny? In a nutshell, it’s an R package that lets you build interactive web applications right from R. No HTML, CSS, or JavaScript knowledge required—it’s like a shortcut to web development greatness.

With Shiny, you can create dashboards, visualizations, and even full-fledged web apps. And the best part? It’s reactive, meaning your app automatically updates when inputs change. It’s like magic, but with fewer wands and more parentheses.

We’re going to get hands-on with Shiny today, and by the end of this session, you’ll be ready to build your own interactive masterpieces. So, what do you say—ready to get your Shiny on?
:::

## Anatomy of a Shiny App <!-- slide_06 --> {.smaller}

```{r ShinyCodeSnippet}
#| echo: true
#| eval: false

library(shiny)
ui <- ... # UI elements go here
server <- function(input, output) {
  ... # Server logic goes here
}
shinyApp(ui, server)
```

::: notes
Alright, we’ve got Shiny installed — congrats! You’re officially ready to build something awesome. But before we jump into coding, let’s break down the basic anatomy of a Shiny app. Think of it as a crash course in app biology.

First up, there are three main components:

UI (User Interface): This is like the shiny (pun intended) hotel lobby — it’s what users see and interact with. Buttons, sliders, and text boxes live here, welcoming your users like a charming front desk concierge. Server: Behind the scenes, this is where the real magic happens. If the UI is the lobby, the server is the overworked hotel staff making sure the Wi-Fi, room service, and weirdly specific guest requests all work seamlessly. shinyApp: This is the matchmaker that brings the UI and server together, turning your code into a fully functional app.
:::

. . .

```{r ShinyUIServer}
#| fig-align: center

library(tidyverse)
theme_set(theme_void(base_family = "Avenir Next"))

shiny_flow_df <- tibble(
  xmin = c(0, 10),
  xmax = c(5, 15),
  ymin = c(0, 0),
  ymax = c(10, 10),
  fill = c("UI", "Server")
)
shiny_flow_df |>
  ggplot() +
  geom_rect(
    aes(
      xmin = xmin,
      xmax = xmax,
      ymin = ymin,
      ymax = ymax,
      fill = fill
    ),
    show.legend = FALSE
  ) +
  geom_text(
    aes(
      x = (xmin + xmax) / 2,
      y = (ymin + ymax) / 2,
      label = fill
    ),
    family = "Avenir Next",
    color = "white",
    fontface = "bold",
    size = 20
  ) +
  geom_segment(
    aes(
      x = c(10, 5),
      xend = c(5, 10),
      y = c(3, 7),
      yend = c(3, 7)
    ),
    arrow = arrow(length = unit(0.5, "cm")),
    linewidth = 1.25,
    color = "white"
  ) +
  geom_text(
    aes(
      x = c(7.5, 7.5),
      y = c(3.75, 7.75),
      label = c("Output", "Input")
    ),
    family = "Avenir Next",
    color = "white",
    fontface = "bold",
    size = 8
  ) +
  scale_fill_manual(
    values = c("#9471f6", "#74c947")
  ) +
  theme(
    panel.background = element_rect(
      fill = "#363f41",
      color = "#363f41"
    )
  )
```

::: notes
Now, check out the diagram on the slide. It’s like the flowchart version of a rom-com:

Inputs from the UI go to the server. Imagine your user clicking a button or entering text—it’s like placing an order at a coffee shop. Outputs flow back from the server to the UI. This is your latte (or chart, or table) being served in all its glory. This back-and-forth makes Shiny apps reactive. The server is always listening for changes in inputs and updating the outputs, creating that smooth, interactive experience.

So how does all this magic work? When you run a Shiny app locally, it sets up a mini web server on your computer. Your machine becomes both the chef and the diner, cooking up data and serving it to yourself.

If you publish your app to a web server, things get fancier. The web server hosts your app, and anyone with an internet connection can use it. It’s like opening your own restaurant—except no health inspections.

Before you roll up your sleeves and build your first Shiny app, let’s take a look at some examples to see what’s possible. From holiday countdown timers to CIA factbook visualizations, Shiny apps can be as simple or complex as you want. Let’s dive in and see what sparks your creativity!
:::

## Tidy Tuesday Examples <!-- slide_07 -->

::::: columns
::: {.column width="50%"}
[Holiday Countdown Timer](https://gdatascience.shinyapps.io/holiday-timer/){target="_blank"}

![](images/clipboard-1124655419.png)
:::

::: {.column width="50%"}
[CIA Factbook Country Cluster Explorer](https://gdatascience.shinyapps.io/cia_factbook/){target="_blank"}

![](images/clipboard-1508160099.png)
:::
:::::

::: notes
Now, I want to show you a couple of Shiny apps I’ve created during my Tidy Tuesday sessions. These projects were a fun way to explore data, sharpen my skills, and sometimes—even unintentionally—discover bugs!

Holiday Timer This app is a simple countdown timer for upcoming holidays. It shows the days, minutes, and seconds remaining until the next big event. Fun fact: there’s a timezone bug that skews the countdown by a few hours. I never got around to debugging it, but hey—it’s a feature, not a flaw, right?

2014 CIA Factbook Country Cluster Explorer This app uses data from the CIA Factbook to group countries based on various metrics with k-means clustering. Users can explore scatter plots of different variables, and the app color-codes the points by their cluster.

When I first built this app, it was clear to me that two clusters were the best choice—simple, explainable, and meaningful. But, sometimes in the real world, stakeholders want to see all of the data and clustering options for themselves. Enter Shiny! With its dynamic interactivity, the app allows users to experiment with different numbers of clusters and immediately see the results while keeping you out of endless back-and-forths.

Both of these apps started as experiments, and they taught me a lot about Shiny’s capabilities—and its quirks.

Now, I’m excited to see what you will create as we get hands-on. But first, let’s go step-by-step and build something interactive together.
:::

## Create a Shiny App <!-- slide_08 -->

::::: columns
::: {.column width="50%"}
File \> New File

-   Shiny Web App

![](images/clipboard-1611009231.png){fig-align="left" height="350"}
:::

::: {.column width="50%"}
Application name:

-   **old_faithful**

![](images/clipboard-4002331887.png){fig-align="center"}
:::
:::::

::: notes
Alright, it’s time to get our hands dirty and create our first Shiny app using R Studio. Follow these steps with me:

1.  Open R Studio.

2.  Go to the top menu and click on **File**.

3.  Select **New File** from the dropdown menu.

4.  Choose **Shiny Web App** from the options.

5.  A dialog box will appear. Enter the Application Name as **‘old_faithful’**.

6.  For Application Type, select **‘Single File (app.R)’**. This option is great for simple apps and is perfect for our first Shiny app.

7.  Click the **‘Browse’** button to choose the directory where you want to save your app.

8.  Click the **‘Create’** button.

And just like that, R Studio will generate a basic Shiny app template for you. This template includes a simple user interface and server logic that we can build upon.

Let’s take a moment to explore what R Studio has created for us. You'll see two main sections in the **‘app.R’** file: the UI and server components. The UI section defines the layout of the app, while the server section contains the logic to make the app interactive.

By following these steps, you’ve just created the foundation of your first Shiny app. Now, let’s dive into the code and start customizing it to make it our own!
:::

## Run the Shiny App

![](images/run_shiny.png){fig-align="center"}

::: notes
Now that we’ve created our first Shiny app, it’s time to see it in action! Here’s how you can run your Shiny app in R Studio:

In R Studio, locate the ‘Run App’ button, which is usually at the top right corner of the script editor. Click on the ‘Run App’ button. When you click this button, R Studio does something pretty cool behind the scenes. It sets up a local web server on your machine. This local server is what makes your Shiny app interactive and responsive.

Once the server is up and running, your app will launch in a new window. This window is where you can interact with your app, see the outputs, and test the functionality.

So, what’s happening behind the scenes? Here’s a quick rundown:

-   R Studio starts a local web server that hosts your Shiny app. This server handles all the communication between the UI and server components of your app.

-   As you interact with the app (e.g., entering data, clicking buttons), the server processes these inputs and updates the outputs in real-time.

-   The app runs in a web browser window, giving you a preview of how it will look and behave when deployed on a web server. By running your app locally, you can develop and test it before sharing it with others. It’s a great way to ensure everything works as expected and to make any necessary tweaks.

Ready to give it a try? Click that ‘Run App’ button and watch your Shiny app come to life!
:::

## Old Faithful Geyser Data <!-- slide_09 -->

```{r}
sliderInput("bins", "Number of bins:",
            min = 1, max = 50, value = 30)
plotOutput("distPlot")
```

```{r}
#| context: server
output$distPlot <- renderPlot({
  x <- faithful[, 2]
  bins <- seq(min(x), max(x), length.out = input$bins + 1)
  hist(x, breaks = bins, col = 'darkgray', border = 'white',
       xlab = 'Waiting time to next eruption (in mins)',
       main = 'Histogram of waiting times')
})
```

::: notes
Now that we’ve run our Shiny app, let’s take a closer look at what it does and how it works. Our app is a simple yet powerful example that visualizes the Old Faithful Geyser data. Here’s what you’ll see:

-   The app has a clear and descriptive title at the top: ‘Old Faithful Geyser Data’. This lets users know exactly what the app is about.

-   Below the title, there’s a slider input labeled ‘Number of bins’. This slider allows users to adjust the number of bins in the histogram. The range is from 1 to 50, with a default value set to 30. This interactivity lets users explore the data in different levels of granularity.

-   The main feature of the app is a histogram plot of the Old Faithful Geyser eruption durations. This plot is generated using base R graphics. As users adjust the slider, the histogram updates in real-time to reflect the new number of bins, providing an immediate visual feedback.

So, how does this all work together? When you move the slider, the input value is sent to the server. The server then recalculates the histogram with the specified number of bins and sends the updated plot back to the UI. This seamless interaction is what makes Shiny apps so engaging and dynamic.

By exploring this app, you can see how Shiny makes it easy to add interactivity to your data visualizations. It’s a great starting point for building more complex and customized applications.

Ready to build on this foundation and create something even more exciting? Let’s dive deeper into Shiny’s capabilities!
:::

## Shiny Layouts <!-- slide_10 -->

```{r ShinyLayouts}
#| echo: true
#| eval: false
#| code-line-numbers: "1-4,11"

fluidPage(
  titlePanel("Old Faithful Geyser Data"),
  sidebarLayout(
    sidebarPanel(
      sliderInput(
        inputId = "bins",
        label = "Number of bins:",
        ... # Other arguments (e.g., min, max, value)
      )
    ),
    mainPanel(
      plotOutput("distPlot")
    )
  )
)

```

[Shiny Layout Gallery](https://shiny.posit.co/r/layouts/){target="_blank"}

::: notes
Let’s talk about the foundation of any Shiny app: the layout. A good layout isn’t just about looking pretty—it’s what makes your app intuitive and easy to use. If the layout is the stage, your data is the star, and Shiny helps set the scene beautifully.

The most popular layout in Shiny is fluidPage. It’s like the stretchy yoga pants of app design—it adapts effortlessly to different screen sizes, from desktops to mobile phones. Whether your users are on a giant monitor or squinting at their phone, fluidPage keeps your app looking sharp.

For apps that need tabs, navbarPage is a solid choice. It’s perfect for breaking down complex content into bite-sized, navigable pieces. If you’re designing an app with controls on the side—like sliders or input boxes—sidebarLayout is your go-to.

Take a look at this simple code snippet:

Line 1: fluidPage() is the main wrapper that defines a responsive, single-page layout. Everything you see in the app will live inside this. Line 2: titlePanel() is the header—it’s like your app’s welcome mat, setting the tone with a title. Line 3: sidebarLayout() creates the structure for a side panel and main content area. Think of it like a two-column newspaper: controls on one side, results on the other. Line 4: Inside sidebarLayout(), sidebarPanel() is where the controls go—sliders, buttons, dropdowns, and anything your user interacts with. Line 11: mainPanel() is for the main attraction—charts, tables, or whatever outputs your app is generating. The magic of Shiny layouts is how flexible and intuitive they are. Not sure where to start? Check out Shiny’s layout gallery, which is packed with examples to spark your creativity.

And here’s the key takeaway: a thoughtful layout doesn’t just make your app look polished—it makes it more effective, drawing your audience into the story you’re telling with your data.

Now, let’s dive into the interactive elements that bring these layouts to life.
:::

## Shiny Widgets <!-- slide_11 -->

```{r ShinyUIWidgets}
#| echo: true
#| eval: false
#| code-line-numbers: "5-9"

fluidPage(
  titlePanel("Old Faithful Geyser Data"),
  sidebarLayout(
    sidebarPanel(
      sliderInput(
        inputId = "bins",
        label = "Number of bins:",
        ... # Other arguments (e.g., min, max, value)
      )
    ),
    mainPanel(
      plotOutput("distPlot")
    )
  )
)

```

[Shiny Widgets Gallery](https://shiny.posit.co/r/gallery/widgets/widget-gallery/){target="_blank"}

::: notes
Now that we’ve nailed the layout, it’s time to make your app interactive. This is where widgets come in—the elements that let users interact with your app.

Widgets in Shiny are like the controls on a dashboard: they take user input and feed it to your server, which updates the outputs in real time. Here are some of the most common widgets:

-   sliderInput: Ideal for selecting values within a range, like filtering data.
-   radioButtons: Perfect for choosing between predefined options.
-   textInput: Allows users to enter custom text, great for dynamic queries.
-   And of course, there are dropdowns, checkboxes, and buttons to cover all your interaction needs.

For example, let’s break down the sliderInput widget:

This creates a slider that controls the number of bins in a histogram. The inputId links it to the server, the label is what users see, and the min, max, and value define its range and default setting.

Shiny’s widget gallery is your go-to resource for exploring all the available widgets and learning how to implement them.

Now, as we get hands-on with widgets in our apps, don’t worry too much about making things perfect. Focus on getting something interactive up and running. And remember, the cleaner look you’ll learn on the next slide can really help showcase the functionality of these widgets.

Let’s move on and bring some style to all this interactivity!
:::

## Bootstrap Theme <!-- slide_12 -->

```{r bslib}
#| echo: true
#| eval: false

library(bslib)

ui <- fluidPage(
  theme = bs_theme(bootswatch = "darkly"),
  ...
)

```

![](images/clipboard-158655481.png)

[Bootswatch Theme Gallery](https://bootswatch.com/){target="_blank"}

::: notes
So, your Shiny app is working great, but let’s be honest—does it look great? Sometimes, all it takes to upgrade your app from boring to amazing is a cleaner, more polished design. That’s where the {bslib} package comes in.

{bslib} lets you use the bs_theme() function to apply a Bootswatch theme to your Shiny app. With just one line of code, you can give your app a whole new vibe—no CSS wizardry required.

Here’s an example using the Darkly theme:

The Darkly theme gives your app a sleek, moody aesthetic—perfect for data visualizations that feel bold and modern.

Want more options? Visit the Bootswatch gallery to explore a variety of themes, including:

-   Cerulean for a clean, professional look.
-   Flatly for something modern and polished.
-   Lumen if you’re going for bright and clean.

Here’s the fun part: Using {bslib} is my little Easter egg for you. It’s one of those simple but powerful tools that can instantly take your app to the next level. You don’t need to change any functionality—just swap in a theme, and suddenly your app feels more professional and engaging.

It’s amazing how much a clean, cohesive design can elevate the user experience. So, while everyone’s busy perfecting the backend, don’t forget to make your frontend shine, too.

Let’s experiment with this and give your apps a stylish boost!
:::

## Old Faithful Geyser App <!-- slide_13 -->

### [Eruption Duration vs. Waiting Time]{style="color: #74c947"}

```{r}
#| panel: sidebar
sliderInput(
  "duration", 
  "Eruption Duration (minutes):",
  min = min(faithful$eruptions), 
  max = max(faithful$eruptions), 
  value = c(min(faithful$eruptions), max(faithful$eruptions))
)
sliderInput(
  "waiting", 
  "Waiting Time (minutes):",
  min = min(faithful$waiting), 
  max = max(faithful$waiting), 
  value = c(min(faithful$waiting), max(faithful$waiting))
)
```

```{r}
#| panel: fill
plotly::plotlyOutput("scatterPlot")
```

```{r}
#| context: server
library(plotly)
library(ggplot2)
library(dplyr)
output$scatterPlot <- 
  renderPlotly({
    ggplotly(
      faithful |>
        filter(
          eruptions >= input$duration[1],
          eruptions <= input$duration[2],
          waiting >= input$waiting[1],
          waiting <= input$waiting[2]
        ) |>
        ggplot(aes(x = eruptions, y = waiting)) +
        geom_point(
          color = "#74c947"
        ) +
        geom_smooth(
          method = "lm", formula = y ~ x,
          se = FALSE,
          color = "#9471f6",
          lty = 2
        ) +
        labs(
          x = "Eruption Duration (minutes)",
          y = "Waiting Time (minutes)"
        ) +
        theme_light() +
        theme(
          panel.background = element_rect(
            fill = "#363f41",
            color = "#363f41"
          ),
          panel.border = element_rect(
            color = "#363f41"
          ),
          plot.background = element_rect(
            fill = "#363f41",
            color = "#363f41"
          ),
          text = element_text(
            family = "Avenir Next",
            color = "white"
          ),
          axis.text = element_text(
            family = "Avenir Next",
            color = "white"
          ),
          panel.grid = element_blank(),
          axis.ticks = element_blank()
        )
    )
  })
```

::: notes
Alright, it’s time for a challenge! We’re going to take the default Old Faithful histogram app that comes with Shiny and transform it into something much more interactive and powerful.

Here’s the goal: adapt the default app to create an interactive scatter plot of the Old Faithful dataset, showing eruption durations on the x-axis and waiting times on the y-axis. We’ll be enhancing it with:

-   Sliders to filter values on both axes.
-   Plot interactivity using ggplot2 for visuals and Plotly for zooming, panning, and hovering.

Once your group gets the basics working, you can earn bonus points by tackling these advanced challenges:

1.  Add a dropdown: Allow users to choose a color for the points on the scatter plot.
2.  Dynamic title: Update the plot title based on the slider values.
3.  Summary table: Display average, minimum, and maximum values for the filtered data.
4.  Styling: Use custom CSS or themes to make the app look polished and professional.

We’ll break into small groups, and each group will work on adapting the default app into this enhanced version. I’ve included all the hints and documentation you’ll need, but feel free to ask me for help if you get stuck.

Remember, this is a creative and collaborative exercise. Even if you’re new to Shiny, give it a try and see how much progress your group can make.

At the end, we’ll come back together to showcase what you’ve built and discuss what you learned. Good luck—let’s get coding!
:::

## Questions? <!-- slide_14 -->

-   [LinkedIn.com/in/anthony-raul-galvan](https://www.linkedin.com/in/anthony-raul-galvan){target="_blank"}
-   [Email: agalvan\@acorns.com](mailto:agalvan@acorns.com){target="_blank"}
